#!/bin/zsh

# @description shows usage of command
_bwf_usage () {
cat <<EOF
Bitwarden using fzf

Usage
    bwf [options] [<ACCOUNT_NAME>]

OPTIONS
    -x, --clipboard     insert into clipbaord (default)
    -s, --stdout        print to standard out. Disables -x
    -h, --help          display this help message
    -p, --password      select password
    -u, --username      select username 
    -b, --both          select username and password
    -n, --notes         select notes
    -t, --totp          select one time password

If either \`-p\`, \`-b\` and \`-u\` are not defined, \`-b\` is set
If both \`-s\` and \`-x\` are set the last one takes precedence
If this program thinks it is running through a pipe -s is set by default

CLIPBOARD
    Uses xclip/wl-clipboard to paste into clipboard
    The clipboard is emptied after 10s

PREVIEW
    By default no preview is shown, but can be toggled using \`ctrl-p\`. The options default to \`hidden,wrap,60%\` but can be overridden by
    variable \`bwf_FZF_PREVIEW\`.

KEYBINDS
    ctrl-p      toggle preview

EOF
}

# @description Helper function to check if a given tool is installed, otherwise die
# @arg $1 string name of the binary
_bwf_need() {
    which "$1" &>/dev/null || return 1
    return 0
}

# @description Edit fzf-command to change appearance
_bwf_fzf_command () {
    local type=$(jq -c -e '.type' <<< "$items")
    local preview='bw get item {-1} | jq -C -r ".| {name: .name, username: .login.username, password: .login.password, notes: .notes, uri: .login.uris[] }" '
    if [ -v "$TMUX" ]; then
       # Edit this if you use tmux and want to change the appearance
       fzf-tmux -p --exit-0 --preview-window $preview_options --bind=ctrl-p:toggle-preview --preview "$preview"  "$@"
    else
       # Edit this if you don't use tmux and want to change the appearance
       fzf --exit-0 --height=25% --layout=reverse --preview-window $preview_options --bind=ctrl-p:toggle-preview --preview "$preview" "$@"
    fi
}

# @description gets the id of the selected item
# * if `ACCOUNT_NAME` is provided, then return a single item
# * if `ACCOUNT_NAME` is not provided, then ask user to select from all accounts

_bwf_getitem () {
    if [ -z "$item" ]; then
        if [ ! -z "$account" ]; then
            if [ -z "$allItems" ]; then
                allItems=$(bw get item "$account")
            fi
            item=$(jq -r '.id' -c <<< "${allItems}")
        else
           if [ -z "$allItems" ]; then
               allItems=$(bw list items | jq ". | map(select(.type==$item_type))")
           fi
           item=$(jq -r '.[] | [.name, .id]' -c <<< "${allItems}" | \
                grep -ao '".*"' | sed 's/","/\t/g' | sed 's/^"\(.*\)"$/\1/' | \
                _bwf_fzf_command --with-nth ..-2 | awk '{print $2}')
        fi
    fi

    if [ -z "$item" ]; then
        echo "❌ no matches"
        return 1
    fi
}

# @description grabs username for given account
_bwf_getuser () {
    if [ "$#" -gt 0 ] && [ -z "$1" ]; then
        item=$*
    else
        _bwf_getitem || return 1
    fi
    jq -r 'map(select(.id == "'"$item"'")) | .[] .login.username' \
        <<< "${allItems}"
}

# @description grabs password for given account
_bwf_getpassword () {
    if [ "$#" -gt 0 ] && [ -z "$1" ]; then
        item=$*
    else
        _bwf_getitem || return 1
    fi
    jq -r 'map(select(.id == "'"$item"'")) | .[] | .login.password' \
            <<< "${allItems}"
}

# @description grabs totp for given account
_bwf_gettotp () {
    if [ "$#" -gt 0 ] && [ -z "$1" ]; then
      item=$*
    else
      _bwf_getitem || return 1
    fi
    bw get totp "$item"
}

# @description grabs notes for given account
_bwf_getnotes () {
   if [ "$#" -gt 0 ] && [ -z "$1" ]; then
      item=$*
   else
      _bwf_getitem || return 1
   fi
   jq -r 'map(select(.id == "'"$item"'")) | .[] | .notes' \
         <<< "${allItems}"
}

# @description empties the clipboard after 10s
_bwf_emptyclipboard_xclip() {
    sleep 10
    echo "" | xclip -selection clipboard -i | echo "✔ clipboard emptied"
}
_bwf_emptyclipboard_wl() {
    sleep 10
    wl-copy --clear
    echo "✔ clipboard emptied"
}

# @description check is session is unlocked, otherwise do unlock
_bwf_unlock() {
    if [ -z $BW_SESSION ] || [ "$(bw status | jq -r '.status')" = "locked" ]; then
        if BW_SESSION=$(bw unlock --raw); then
        export BW_SESSION="$BW_SESSION"
        else
        return 1
        fi
    fi
}

# @description copy to clipboard
_bwf_copy_xclip() {
    xclip --selection clipboard -i
}
_bwf_copy_p_xclip() {
    xclip --selection primary -i
}
_bwf_copy_wl() {
    wl-copy -t "text/plain"
}
_bwf_copy_p_wl() {
    wl-copy -t "text/plain" -p
}

bwf() {
    _bwf_unlock

    local uflag=0
    local pflag=0
    local bflag=0
    local nflag=0
    local tflag=0
    local cflag=0
    item=""
    item_type="1" #1=login, 2=secure note, 3=card, 4=identity
    preview_options="hidden,wrap,60%"

    # set xflag if not through a pipe
    if [ -t 1 ]; then
        xflag=1
    else
        xflag=0
    fi

    if ! _bwf_need bw; then
        echo "bw is required but not installed"
        return 1
    fi
    if ! _bwf_need jq; then
        echo "jq is required but not installed"
        return 1
    fi
    if ! _bwf_need fzf; then
        echo "fzf is required but not installed"
        return 1
    fi

    if [ ! -z "$bwf_FZF_PREVIEW" ]; then
        preview_options="$bwf_FZF_PREVIEW"
    fi

    ### Read arguments
    parsed_options=$(getopt -n "$0" -o upxnths -l username,help,password,notes,clipboard,totp,stdout -- "$@")
    eval "set -- $parsed_options"
    while [ "$#" -gt 0 ]; do
        case $1 in
            (-u|--username)
                uflag=1
                shift
            ;;
            (-p|--password)
                pflag=1
                shift
            ;;
            (-b|--both)
                bflag=1
                shift
            ;;
            (-n|--notes)
                nflag=1
                shift
            ;;
            (-x|--clipboard)
                xflag=1
                shift
            ;;
            (-t|--totp)
                tflag=1
                shift
            ;;
            (-s|--stdout)
                xflag=0
                shift
            ;;
            (-h|--help) _bwf_usage; return 0;;
            (--)
                shift
                break
            ;;
            (*) exit_abnormal; return 1;;
        esac
    done

    if [[ "$xflag" -eq 1 ]]; then # copy to clipboard
        if [[ $XDG_SESSION_TYPE == "wayland" ]]; then
            if ! _bwf_need wl-copy; then
                echo "wl-clipboard is required but not installed"
                return 1
            else
                local bwf_emptyclipboard=_bwf_emptyclipboard_wl
                local copy_command=_bwf_copy_wl
                local copy_p_command=_bwf_copy_p_wl
            fi
        elif [[ $XDG_SESSION_TYPE == "x11" ]]; then
            if ! _bwf_need xclip; then
                echo "xclip is required but not installed"
                return 1
            else
                local bwf_emptyclipboard=_bwf_copy_xclip
                local copy_command=_bwf_copy_xclip
                local copy_p_command=_bwf_copy_p_xclip
            fi
        fi
    fi

    if [ -z "$*" ]; then
        account=""
    else
        account="$*"
    fi

    _bwf_getitem || return 1

    # show both per default
    if [ $bflag -gt 0 ] || ([ $bflag -eq 0 ] && [ $uflag -eq 0 ] && [ $pflag -eq 0 ] && [ $nflag -eq 0 ] && [ $tflag -eq 0 ]) ; then
        if [ $xflag -gt 0 ]; then
            _bwf_getuser "$item" | $copy_p_command | echo "✔ username copied to primary clipboard"
            _bwf_getpassword "$item" | $copy_command | echo "✔ password copied to clipboard"
            $bwf_emptyclipboard&
        else
            _bwf_getuser "$item"
            _bwf_getpassword "$item"
        fi
    fi

    if [ $uflag -gt 0 ]; then
        if [ $xflag -gt 0 ]; then
            _bwf_getuser "$item" | $copy_command | echo "✔ username copied to clipboard"
        else
            _bwf_getuser "$item"
        fi
    fi

    if [ $pflag -gt 0 ]; then
        if [ $xflag -gt 0 ]; then
            _bwf_getpassword "$item" | $copy_command | echo "✔ password copied to clipboard"
            $bwf_emptyclipboard&
        else
            _bwf_getpassword "$item"
        fi
    fi

    if [ $nflag -gt 0 ]; then
        if [ $xflag -gt 0 ]; then
            _bwf_getnotes "$item" | $copy_command | echo "✔ notes copied to clipboard"
        else
            _bwf_getnotes "$item"
        fi
    fi

    if [ $tflag -gt 0 ]; then
        if [ $xflag -gt 0 ]; then
            _bwf_gettotp "$item" | $copy_command | echo "✔ onetime password copied to clipboard"
            $bwf_emptyclipboard&
        else
            _bwf_gettotp "$item"
        fi
    fi

    unset item
    unset item_type
    unset preview_options
    unset account
    unset allItems
}


# If not sourced run bwf function
if [[ $ZSH_EVAL_CONTEXT =~ :file$ ]]; then
    # add some aliases
    alias bwfu="bwf -u"
    alias bwfus="bwf -u -s"
    alias bwfp="bwf -p"
    alias bwfps="bwf -p -s"
    alias bwft="bwf -t"
    alias bwfts="bwf -t -s"
    alias bwfn="bwf -n"
    alias bwfns="bwf -n -s"
else
    bwf "$@"
fi

